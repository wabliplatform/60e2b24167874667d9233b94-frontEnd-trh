/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Patients from '../model/Patients';

/**
* Patients service.
* @module api/PatientsApi
* @version 1.0.0
*/
export default class PatientsApi {

    /**
    * Constructs a new PatientsApi. 
    * @alias module:api/PatientsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createpatients operation.
     * @callback module:api/PatientsApi~createpatientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patients} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Patients} patients data to be created
     * @param {module:api/PatientsApi~createpatientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patients}
     */
    createpatients(patients, callback) {
      let postBody = patients;
      // verify the required parameter 'patients' is set
      if (patients === undefined || patients === null) {
        throw new Error("Missing the required parameter 'patients' when calling createpatients");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Patients;
      return this.apiClient.callApi(
        '/patients', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletepatients operation.
     * @callback module:api/PatientsApi~deletepatientsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} patientsId the Id parameter
     * @param {module:api/PatientsApi~deletepatientsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletepatients(patientsId, callback) {
      let postBody = null;
      // verify the required parameter 'patientsId' is set
      if (patientsId === undefined || patientsId === null) {
        throw new Error("Missing the required parameter 'patientsId' when calling deletepatients");
      }

      let pathParams = {
        'patientsId': patientsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/patients/{patientsId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllpatients operation.
     * @callback module:api/PatientsApi~getAllpatientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Patients>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/PatientsApi~getAllpatientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Patients>}
     */
    getAllpatients(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Patients];
      return this.apiClient.callApi(
        '/patients/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamspatients operation.
     * @callback module:api/PatientsApi~getByParamspatientsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Patients>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/PatientsApi~getByParamspatientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Patients>}
     */
    getByParamspatients(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamspatients");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Patients];
      return this.apiClient.callApi(
        '/patients/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getpatients operation.
     * @callback module:api/PatientsApi~getpatientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patients} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} patientsId the Id parameter
     * @param {module:api/PatientsApi~getpatientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patients}
     */
    getpatients(patientsId, callback) {
      let postBody = null;
      // verify the required parameter 'patientsId' is set
      if (patientsId === undefined || patientsId === null) {
        throw new Error("Missing the required parameter 'patientsId' when calling getpatients");
      }

      let pathParams = {
        'patientsId': patientsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Patients;
      return this.apiClient.callApi(
        '/patients/{patientsId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatepatients operation.
     * @callback module:api/PatientsApi~updatepatientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Patients} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} patientsId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Patients} opts.patients data to be updated
     * @param {module:api/PatientsApi~updatepatientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Patients}
     */
    updatepatients(patientsId, opts, callback) {
      opts = opts || {};
      let postBody = opts['patients'];
      // verify the required parameter 'patientsId' is set
      if (patientsId === undefined || patientsId === null) {
        throw new Error("Missing the required parameter 'patientsId' when calling updatepatients");
      }

      let pathParams = {
        'patientsId': patientsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Patients;
      return this.apiClient.callApi(
        '/patients/{patientsId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
